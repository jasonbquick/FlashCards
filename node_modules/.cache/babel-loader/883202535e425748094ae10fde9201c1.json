{"ast":null,"code":"var _jsxFileName = \"/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardView({\n  cards\n}) {\n  _s();\n\n  const history = useHistory();\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0);\n  const [flipCount, setFlipCount] = useState(0);\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n  const cardCount = cardID + 1;\n\n  function handleFlip() {\n    setFlip(!flip);\n    console.log(flipCount);\n    setFlipCount(previous => previous + 1);\n    console.log(flipCount);\n  }\n\n  function handleNext() {\n    setCardID(previous => previous + 1);\n\n    if (cardCount >= length) {\n      if (window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")) {\n        window.location.reload();\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n\n  if (length > 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Card \", cardCount, \" of \", length]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: flip ? cards[cardID].front : cards[cardID].back\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-primary p-2\",\n              onClick: handleFlip,\n              children: \"Flip\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }, this), flipCount > 0 ? /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"btn btn-primary p-2\",\n              onClick: handleNext,\n              children: \"Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 37\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Not enough cards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study. There are \", length, \" cards in this deck.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/decks/${deckId}/cards/new`,\n        class: \"btn btn-primary\",\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(CardView, \"zvUjwGsII7CRur8fyHeSFWHcODA=\", false, function () {\n  return [useHistory, useRouteMatch, useParams];\n});\n\n_c = CardView;\nexport default CardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardView\");","map":{"version":3,"sources":["/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js"],"names":["React","useEffect","useState","Link","useRouteMatch","useParams","useHistory","CardView","cards","history","flip","setFlip","cardID","setCardID","flipCount","setFlipCount","url","path","param","deckId","length","cardCount","handleFlip","console","log","previous","handleNext","window","confirm","location","reload","push","front","back"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\n\nfunction CardView({ cards }) {\n    const history = useHistory();\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0)\n  const [flipCount, setFlipCount] = useState(0)\n  const { url, path } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n  const cardCount = cardID + 1\n  function handleFlip(){\n    setFlip(!flip); \n    console.log(flipCount)\n    setFlipCount((previous) => previous + 1)\n    console.log(flipCount)\n  }\n  function handleNext(){\n      setCardID((previous) => previous + 1)\n      if (cardCount >= length){\n      if(window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")){\n          window.location.reload()\n      }\n      else {\n          history.push(\"/\")\n      }\n    }\n  }\n  if (length > 2) {\n    return (\n        <div>\n            <div class=\"container border\">\n                <div>\n                    <div>\n                    <h3>Card {cardCount} of {length}</h3>\n                    <p>{flip ? cards[cardID].front : cards[cardID].back}</p>\n                    <button class=\"btn btn-primary p-2\" onClick={handleFlip}>Flip</button>\n                    {flipCount > 0 ?<button class=\"btn btn-primary p-2\" onClick={handleNext}>Next</button> : null\n                    }\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    );\n  } else {\n    return (\n      <div>\n        <h2>Not enough cards.</h2>\n        <p>\n          You need at least 3 cards to study. There are {length} cards in this\n          deck.\n        </p>\n        <a href={`/decks/${deckId}/cards/new`} class=\"btn btn-primary\">\n          Add Card\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default CardView;\n"]},"metadata":{},"sourceType":"module"}