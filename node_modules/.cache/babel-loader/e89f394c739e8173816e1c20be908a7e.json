{"ast":null,"code":"var _jsxFileName = \"/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardView({\n  cards\n}) {\n  _s();\n\n  const history = useHistory();\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0);\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n  const cardCount = cardID + 1;\n\n  function handleNext() {\n    setCardID(previous => previous + 1);\n    console.log('cardCount', cardCount);\n    console.log('length', length);\n\n    if (cardCount >= length) {\n      if (window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")) {\n        window.location;\n      } else {\n        history.push(\"/\");\n      }\n    }\n  } //   const confirmBox = window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")\n  //   console.log(confirmBox)\n  //   if (confirmBox === false) {\n  //       history.push(\"/\")\n  //   }\n\n\n  if (length > 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: cardCount > length ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"Card \", cardCount, \" of \", length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: flip ? cards[cardID].front : cards[cardID].back\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn btn-primary p-2\",\n                onClick: () => setFlip(!flip),\n                children: \"Flip\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 40,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn\",\n                onClick: () => setCardID(previous => previous + 1),\n                children: \"NEXT\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 22\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                class: \"btn btn-primary p-2\",\n                onClick: handleNext,\n                children: \"Next\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 22\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 50\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Not enough cards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study. There are \", length, \" cards in this deck.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/decks/${deckId}/cards/new`,\n        class: \"btn btn-primary\",\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(CardView, \"AVG03oBKCEZ4dE1JTznnsntpdUg=\", false, function () {\n  return [useHistory, useRouteMatch, useParams];\n});\n\n_c = CardView;\nexport default CardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardView\");","map":{"version":3,"sources":["/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js"],"names":["React","useEffect","useState","Link","useRouteMatch","useParams","useHistory","CardView","cards","history","flip","setFlip","cardID","setCardID","url","path","param","deckId","length","cardCount","handleNext","previous","console","log","window","confirm","location","push","front","back"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams, useHistory } from \"react-router-dom\";\n\nfunction CardView({ cards }) {\n    const history = useHistory();\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0)\n  const { url, path } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n  const cardCount = cardID + 1\n  function handleNext(){\n      setCardID((previous) => previous + 1)\n      console.log('cardCount', cardCount)\n      console.log('length', length)\n      if (cardCount >= length){\n      if(window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")){\n          window.location\n      }\n      else {\n          history.push(\"/\")\n      }\n    }\n  }\n//   const confirmBox = window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")\n//   console.log(confirmBox)\n//   if (confirmBox === false) {\n//       history.push(\"/\")\n//   }\n  if (length > 2) {\n    return (\n        <div>\n            <div class=\"container border\">\n                <div>\n                    <div>\n                    {cardCount > length ? null : <div>\n                    <h3>Card {cardCount} of {length}</h3>\n                    <p>{flip ? cards[cardID].front : cards[cardID].back}</p>\n                    <button class=\"btn btn-primary p-2\" onClick={() => setFlip(!flip)}>Flip</button>\n                    {/* <button class=\"btn btn-secondary p-2\" onClick={() => {if(window.confirm(\"Restart cards? Click 'cancel' to return to the home page\")) history.push(\"/\")\n                    : setCardID((previous) => \n                     (previous + 1)>Next</button>*/}\n                     <button class=\"btn\" onClick={() => setCardID((previous) => previous + 1)}>NEXT</button>\n                     <button class=\"btn btn-primary p-2\" onClick={handleNext}>Next</button>\n                    </div>}\n                    </div>\n                </div>\n                \n            </div>\n        </div>\n    );\n  } else {\n    return (\n      <div>\n        <h2>Not enough cards.</h2>\n        <p>\n          You need at least 3 cards to study. There are {length} cards in this\n          deck.\n        </p>\n        <a href={`/decks/${deckId}/cards/new`} class=\"btn btn-primary\">\n          Add Card\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default CardView;\n"]},"metadata":{},"sourceType":"module"}