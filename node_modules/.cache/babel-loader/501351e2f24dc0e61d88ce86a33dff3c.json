{"ast":null,"code":"var _jsxFileName = \"/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CardView({\n  cards\n}) {\n  _s();\n\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0);\n  const {\n    url,\n    path\n  } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n\n  if (length > 2) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container border\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Card \", cardID + 1, \" of \", length]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: flip ? cards[cardID].front : cards[cardID].back\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 18,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-primary p-2\",\n            onClick: () => setFlip(!flip),\n            children: \"Flip\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            class: \"btn btn-secondary p-2\",\n            onClick: () => setCardID(previous => previous + 1),\n            children: \"Next\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Not enough cards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You need at least 3 cards to study. There are \", length, \" cards in this deck.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: `/decks/${deckId}/cards/new`,\n        class: \"btn btn-primary\",\n        children: \"Add Card\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(CardView, \"mShXKkhr0LNEKPi7AKZOp6dn5RA=\", false, function () {\n  return [useRouteMatch, useParams];\n});\n\n_c = CardView;\nexport default CardView;\n\nvar _c;\n\n$RefreshReg$(_c, \"CardView\");","map":{"version":3,"sources":["/Users/jasonquick/Thinkful/qualified/flashcards/j/src/Layout/CardView.js"],"names":["React","useEffect","useState","Link","useRouteMatch","useParams","CardView","cards","flip","setFlip","cardID","setCardID","url","path","param","deckId","length","front","back","previous"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,SAA9B,QAA+C,kBAA/C;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAA6B;AAAA;;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM;AAAEU,IAAAA,GAAF;AAAOC,IAAAA;AAAP,MAAgBT,aAAa,EAAnC;AACA,QAAMU,KAAK,GAAGT,SAAS,EAAvB;AACA,QAAMU,MAAM,GAAGD,KAAK,CAACC,MAArB;AACA,QAAMC,MAAM,GAAGT,KAAK,CAACS,MAArB;;AACA,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,wBACI;AAAA,6BACI;AAAK,QAAA,KAAK,EAAC,kBAAX;AAAA,+BACI;AAAA,kCAEI;AAAA,gCAAUN,MAAM,GAAG,CAAnB,UAA2BM,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA,sBAAIR,IAAI,GAAGD,KAAK,CAACG,MAAD,CAAL,CAAcO,KAAjB,GAAyBV,KAAK,CAACG,MAAD,CAAL,CAAcQ;AAA/C;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII;AAAQ,YAAA,KAAK,EAAC,qBAAd;AAAoC,YAAA,OAAO,EAAE,MAAMT,OAAO,CAAC,CAACD,IAAF,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAKI;AAAQ,YAAA,KAAK,EAAC,uBAAd;AAAsC,YAAA,OAAO,EAAE,MAAMG,SAAS,CAAEQ,QAAD,IAAcA,QAAQ,GAAG,CAA1B,CAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAcD,GAfD,MAeO;AACL,wBACE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,qEACiDH,MADjD;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAME;AAAG,QAAA,IAAI,EAAG,UAASD,MAAO,YAA1B;AAAuC,QAAA,KAAK,EAAC,iBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAYD;AACF;;GApCQT,Q;UAGeF,a,EACRC,S;;;KAJPC,Q;AAsCT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch, useParams } from \"react-router-dom\";\n\nfunction CardView({ cards }) {\n  const [flip, setFlip] = useState(true);\n  const [cardID, setCardID] = useState(0)\n  const { url, path } = useRouteMatch();\n  const param = useParams();\n  const deckId = param.deckId;\n  const length = cards.length;\n  if (length > 2) {\n    return (\n        <div>\n            <div class=\"container border\">\n                <div>\n                    \n                    <h3>Card {cardID + 1 } of {length}</h3>\n                    <p>{flip ? cards[cardID].front : cards[cardID].back}</p>\n                    <button class=\"btn btn-primary p-2\" onClick={() => setFlip(!flip)}>Flip</button>\n                    <button class=\"btn btn-secondary p-2\" onClick={() => setCardID((previous) => previous + 1)}>Next</button>\n                </div>\n                \n            </div>\n        </div>\n    );\n  } else {\n    return (\n      <div>\n        <h2>Not enough cards.</h2>\n        <p>\n          You need at least 3 cards to study. There are {length} cards in this\n          deck.\n        </p>\n        <a href={`/decks/${deckId}/cards/new`} class=\"btn btn-primary\">\n          Add Card\n        </a>\n      </div>\n    );\n  }\n}\n\nexport default CardView;\n"]},"metadata":{},"sourceType":"module"}